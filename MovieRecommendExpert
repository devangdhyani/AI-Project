import streamlit as st
import pandas as pd
import pickle
import requests
import time
import random

def fetch_movie_details(movie_id):
    try:
        credits_url = f'https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US'
        credits_response = requests.get(credits_url)
        credits_response.raise_for_status()
        credits_data = credits_response.json()

        cast_details = []
        for member in credits_data['cast'][:5]:  # Get up to 5 cast members
            name = member['name']
            character = member['character']
            profile_path = member.get('profile_path')
            if profile_path:
                profile_url = f"https://image.tmdb.org/t/p/w185/{profile_path}"
                cast_details.append({'name': name, 'character': character, 'image': profile_url})
            else:
                cast_details.append({'name': name, 'character': character, 'image': None})

        details_url = f'https://api.themoviedb.org/3/movie/{movie_id}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US'
        details_response = requests.get(details_url)
        details_response.raise_for_status()
        details_data = details_response.json()

        release_date = details_data.get('release_date', 'N/A')
        imdb_rating = details_data.get('vote_average', 'N/A')
        gross = details_data.get('revenue', 'N/A')
        overview = details_data.get('overview', 'N/A')

        return cast_details, release_date, imdb_rating, gross, overview

    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching movie details: {e}")
        return [], None, None, None, None

def fetch_poster(movie_id):
    try:
        response = requests.get(
            f'https://api.themoviedb.org/3/movie/{movie_id}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US')
        response.raise_for_status()
        data = response.json()
        return f"https://image.tmdb.org/t/p/w500/{data['poster_path']}"
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching poster: {e}")
        return None

def recommend(movie):
    movie_index = movies[movies['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    recommended_movies = []
    recommended_movies_posters = []
    recommended_movie_casts = []
    recommended_movie_release_dates = []
    recommended_movie_imdb_ratings = []
    recommended_movie_grosses = []
    recommended_movie_overviews = []

    for i in movies_list:
        movie_id = movies.iloc[i[0]].movie_id
        recommended_movies.append(movies.iloc[i[0]].title)
        poster = fetch_poster(movie_id)
        recommended_movies_posters.append(poster)
        cast_details, release_date, imdb_rating, gross, overview = fetch_movie_details(movie_id)
        recommended_movie_casts.append(cast_details)
        recommended_movie_release_dates.append(release_date)
        recommended_movie_imdb_ratings.append(imdb_rating)
        recommended_movie_grosses.append(gross)
        recommended_movie_overviews.append(overview)

    return recommended_movies, recommended_movies_posters, recommended_movie_casts, recommended_movie_release_dates, recommended_movie_imdb_ratings, recommended_movie_grosses, recommended_movie_overviews

movie_dict = pickle.load(open('movies_dict.pkl', 'rb'))
movies = pd.DataFrame(movie_dict)
similarity = pickle.load(open('similarity.pkl', 'rb'))

# --- Styling ---
st.markdown(
    """
    <style>
    .reportview-container {
        background: linear-gradient(135deg, #1e1e1e, #333333);
        color: white;
        display: flex;
    }
    .movie-card-container {
      display: flex; /* Enable horizontal layout */
      gap: 20px;
      margin-top: 20px;
      overflow-x: auto; /* Enable horizontal scrolling if needed */
    }
    .movie-card {
        width: 250px; /* Adjust width to fit horizontally */
        border-radius: 10px;
        overflow: hidden;
        position: relative;
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
        flex-shrink: 0; /* Prevent cards from shrinking */
    }
    .movie-card:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }
    .movie-poster {
        width: 100%;
        height: auto;
        object-fit: cover;
    }
    .movie-details {
        padding: 10px;
    }
    .movie-title {
        font-weight: bold;
        margin-bottom: 5px;
        font-size: 0.9em; /* Adjust font size if needed */
    }
    .movie-rating {
        color: #FFD700;
        font-size: 0.8em; /* Adjust font size if needed */
    }
    .typewriter {
        font-size: 3em;
        font-weight: bold;
        overflow: hidden;
        border-right: .15em solid orange;
        white-space: nowrap;
        margin: 0 auto;
        letter-spacing: .15em;
        animation:
            typing 3s steps(40, end),
            blink-caret .75s step-end infinite;
        font-family: monospace;
        text-align: center;
    }

    @keyframes typing {
        from { width: 0 }
        to { width: 100% }
    }

    @keyframes blink-caret {
        from, to { border-color: transparent }
        50% { border-color: orange; }
    }

    .corner-glow {
        font-size: 8em;
        font-weight: bold;
        color: #FFFFFF;
        text-shadow: 0 0 0 red;
        animation: corner-glow-animation 4s linear infinite;
        font-family: 'Arial Black', sans-serif;
        text-align: center;
        line-height: 1;
    }

    @keyframes corner-glow-animation {
        0% { text-shadow: -6px -6px 0 red; }
        25% { text-shadow: 6px -6px 0 red; }
        50% { text-shadow: 6px 6px 0 red; }
        75% { text-shadow: -6px 6px 0 red; }
        100% { text-shadow: -6px -6px 0 red; }
    }
    .right-side-info {
        padding: 20px;
    }
    .performance-box {
        padding: 10px;
        border-radius: 8px; /* Slightly more rounded */
        margin-bottom: 10px;
        color: black;
        font-weight: bold;
        text-align: center;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; /* Smoother transition */
    }
    .performance-box:hover {
        transform: scale(1.1); /* Increased scale on hover */
        box-shadow: 5px 5px 12px rgba(0, 0, 0, 0.5); /* More intense shadow on hover */
    }
    .performance-box.blockbuster {
        background: linear-gradient(135deg, #ffd700, #f0e68c); /* Gold gradient */
        box-shadow: 3px 3px 8px rgba(255, 215, 0, 0.5); /* Gold shadow */
    }
    .performance-box.superhit {
        background: linear-gradient(135deg, #00ff00, #90ee90); /* Green gradient */
        box-shadow: 3px 3px 8px rgba(0, 255, 0, 0.5); /* Green shadow */
    }
    .performance-box.hit {
        background: linear-gradient(135deg, #ffa500, #ffdab9); /* Orange gradient */
        box-shadow: 3px 3px 8px rgba(255, 165, 0, 0.5); /* Orange shadow */
    }
    .performance-box.flop {
        background: linear-gradient(135deg, #ff0000, #f08080); /* Red gradient */
        box-shadow: 3px 3px 8px rgba(255, 0, 0, 0.5); /* Red shadow */
    }
    .performance-box.na {
        background-color: #808080; /* Gray */
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3); /* Gray shadow */
    }
    .overview-box {
        padding: 10px;
        border-radius: 5px;
        background-color: rgba(255, 255, 255, 0.1); /* Subtle background */
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out,  background-color 0.2s ease-in-out, z-index 0.2s ease-in-out; /* Added font-size and line-height to transition */
        z-index: 1;
    }
    .overview-box:hover {
        transform: scale(1.4); /* Significantly increased scale on hover */
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.5); /* Increased shadow intensity and blur */
        z-index: 10; /* Ensure it overlaps other elements when scaled */
        position: relative; /* Needed for z-index to work */
        background-color: rgba(0, 0, 0, 0.7); /* Darker, semi-transparent black background on hover */
    }
    .cast-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
    }
    .cast-member {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 80px; /* Adjust as needed */
        text-align: center;
        transition: transform 0.2s ease-in-out;
    }
    .cast-member:hover {
        transform: scale(1.1);
    }
    .cast-image {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        transition: box-shadow 0.3s ease-in-out;
    }
    .cast-image:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    }
    .cast-name {
        font-size: 0.8em;
    }
    .movie-title-overlay {
        position: absolute;
        bottom: 60px;
        left: 0;
        width: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px;
        text-align: center;
        font-weight: bold;
        font-size: 1em;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }
    .movie-info-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px;
        text-align: center;
        font-size: 0.8em;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }
    .movie-card:hover .movie-title-overlay,
    .movie-card:hover .movie-info-overlay {
        opacity: 1;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# --- Layout ---
st.markdown('<h1 class="typewriter">ðŸŽ¬ Movie Recommend Expert</h1>', unsafe_allow_html=True)
st.markdown('<p class="corner-glow">ðŸŽ¬ Movie Recommend Expert</p>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center;">Select a movie to get personalized recommendations!</p>', unsafe_allow_html=True)

st.divider()

selected_movie_name = st.selectbox(
    'Select a movie:',
    movies['title'].values
)

if st.button('RECOMMEND'):
    loading_message = st.empty()
    loading_metric = st.empty()

    loading_messages = ["Fetching Recommendations...", "Analyzing Movie Data.. <!!*_*!!>..", "RECOMMENDING SIR <!<^_^>!>"]
    message_index = 0

    names, posters, movie_casts, release_dates, imdb_ratings, grosses, overviews = recommend(selected_movie_name)
    time.sleep(1)

    for i in range(3):
        loading_message.write(loading_messages[message_index])
        loading_metric.metric("Progress:", random.randint(25 * i, 25 * (i + 1)), delta=random.randint(5, 15))
        message_index = (message_index + 1) % len(loading_messages)
        time.sleep(0.5)

    loading_message.empty()
    loading_metric.empty()

    if any(posters):
        st.subheader("Recommended Movies:")
        st.markdown('<div class="movie-card-container">', unsafe_allow_html=True)
        cols = st.columns(5)
        for i in range(5):
         with cols[i]:
            if posters[i]:
                st.markdown(f'<div class="movie-card"><img src="{posters[i]}" class="movie-poster"><div class="movie-details"><div class="movie-title">{names[i]}</div><div>Release: {release_dates[i]}</div><div style="color:#FFD700;">Rating: {imdb_ratings[i]}</div><div>Gross: ${grosses[i]:,.0f}</div></div></div>', unsafe_allow_html=True)
            else:
                st.write(f"Poster not available for {names[i]}")
        st.markdown('</div>', unsafe_allow_html=True)

        st.subheader("More Details:")
        tabs = st.tabs(names)
        for i, tab in enumerate(tabs):
            with tab:
                st.write(f"Recommended Movie: {names[i]}")
                st.markdown('<div class="movie-card-container" style="display: block;">', unsafe_allow_html=True)
                col1, col2 = st.columns([1, 1])
                with col1:
                    if posters[i]:
                        release_date = release_dates[i]
                        imdb_rating = imdb_ratings[i]
                        gross = grosses[i]
                        st.markdown(
                            f'<div class="movie-card"><img src="{posters[i]}" class="movie-poster"><div class="movie-details"><div class="movie-title">{names[i]}</div><div>Release: {release_date}</div><div class="movie-rating">Rating: {imdb_rating}</div><div>Gross: ${gross:,.0f}</div></div></div>',
                            unsafe_allow_html=True)
                    else:
                        st.write(f"Poster not available for {names[i]}")
                with col2:
                    overview = overviews[i]
                    gross_amount = grosses[i]
                    performance_class = ""

                    if gross_amount >= 1000000000:  # $1 Billion
                        performance = "BLOCKBUSTER"
                        performance_color = "gold"
                        performance_class = "blockbuster"
                    elif gross_amount >= 500000000:  # $500 Million
                        performance = "SUPERHIT"
                        performance_color = "green"
                        performance_class = "superhit"
                    elif gross_amount >= 200000000:  # $200 Million
                        performance = "HIT"
                        performance_color = "orange"
                        performance_class = "hit"
                    elif gross_amount > 0:
                        performance = "FLOP"
                        performance_color = "red"
                        performance_class = "flop"
                    else:
                        performance = "N/A"
                        performance_color = "gray"
                        performance_class = "na"

                    st.markdown(
                        f'<div class="right-side-info"><div class="performance-box {performance_class}">**Box Office:** {performance}</div><div class="overview-box">{overview}</div></div>',
                        unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
                with st.expander(f"More about {names[i]}"):
                    cast_details = movie_casts[i]
                    if cast_details:
                        st.write("**Cast:**")
                        st.markdown('<div class="cast-container">', unsafe_allow_html=True)
                        for cast_member in cast_details:
                            image_url = cast_member['image']
                            name = cast_member['name']
                            character = cast_member['character']
                            image_html = f'<img src="{image_url}" class="cast-image">' if image_url else ''
                            st.markdown(
                                f'<div class="cast-member">{image_html}<div class="cast-name">{name}</div><div class="cast-character">({character})</div></div>',
                                unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                    else:
                        st.write("Cast: Not Available")

        st.success("Recommendations complete!")
    else:
            st.error("Failed to generate recommendations. Please try again.")
